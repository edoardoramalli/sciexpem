{"version":3,"sources":["serviceWorker.js","components/Footer.js","components/NavBar.js","components/ToDoData.js","components/TodoItem.js","components/MainContent.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Footer","className","NavBar","toDoData","id","title","completed","TodoItem","state","todos","onCheckBoxClick","bind","console","log","this","React","Component","MainContent","App","ReactDOM","render","document","getElementById"],"mappings":"4LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPSC,MATf,WACI,OACI,4BAAQC,UAAW,UACf,oDCSGC,MAZf,WACI,OACI,yBAAKD,UAAW,UACZ,4BACI,oCACA,wCACA,uC,mCCWDE,EAnBE,CACb,CACIC,GAAI,EACJC,MAAO,SACPC,WAAW,GAEf,CACIF,GAAI,EACJC,MAAO,OACPC,WAAW,GAEf,CACIF,GAAI,EACJC,MAAO,QACPC,WAAW,ICiBJC,E,kDA3BX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,MAAON,GAEX,EAAKO,gBAAkB,EAAKA,gBAAgBC,KAArB,gBALb,E,8DASVC,QAAQC,IAAI,QAEZC,KAAKN,MAAMF,UAAY,Y,+BAIvB,OACI,yBAAKL,UAAW,YAAhB,a,GAjBWc,IAAMC,WCcdC,MAbf,WAEI,OACI,0BAAMhB,UAAW,QACb,qCAHK,UAGL,KACA,uDAGA,kBAAC,EAAD,QC8BGiB,MAVf,WACE,OACI,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCTRC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.586e5362.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nfunction Footer(){\n    return(\n        <footer className={\"Footer\"}>\n            <h3>This is the Footer</h3>\n        </footer>\n    )\n}\n\n\nexport default Footer","import React from \"react\";\n\nfunction NavBar(){\n    return(\n        <nav className={\"NavBar\"}>\n            <ul>\n                <li>Home</li>\n                <li>Contacts</li>\n                <li>Help</li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default NavBar","const toDoData = [\n    {\n        id: 0,\n        title: \"Cucina\",\n        completed: true\n    },\n    {\n        id: 1,\n        title: \"Lava\",\n        completed: false\n    },\n    {\n        id: 2,\n        title: \"Stira\",\n        completed: false\n    },\n\n]\n\nexport default toDoData","import React from \"react\";\nimport toDoData from \"./ToDoData\";\n\nclass TodoItem extends React.Component{\n    constructor() {\n        super();\n        this.state = {\n            todos: toDoData\n        }\n        this.onCheckBoxClick = this.onCheckBoxClick.bind(this)\n    }\n\n    onCheckBoxClick(){\n        console.log(\"Ciao\")\n\n        this.state.completed = \"checked\"\n    }\n\n    render() {\n        return(\n            <div className={\"TodoItem\"}>\n                {/*<input type={\"checkbox\"} checked={this.state.item.completed} onClick={this.onCheckBoxClick}/>*/}\n                {/*<p>{this.state.item.title}</p>*/}\n                EDOOO\n            </div>\n        )\n    }\n\n\n}\n\nexport default TodoItem","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\n\nfunction MainContent(){\n    const name = \"Edoardo\"\n    return(\n        <main className={\"Main\"}>\n            <h1>Hello {name}!</h1>\n            <p>\n                This is the main section\n            </p>\n            <TodoItem />\n        </main>\n    )\n}\n\nexport default MainContent","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n//\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n//\n// export default App;\n\nimport React from \"react\";\nimport Footer from \"./components/Footer\";\nimport NavBar from \"./components/NavBar\";\nimport MainContent from \"./components/MainContent\";\n\nfunction App(){\n  return (\n      <div>\n        <NavBar />\n        <MainContent />\n        <Footer />\n      </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport MyInfo from \"./components/MyInfo\";\nimport App from \"./App\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nfunction List(){\n    return (\n        <ul>\n            <li>Primo</li>\n            <li>Secondo</li>\n            <li>Terzo</li>\n        </ul>\n    )\n}\n\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\"))\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}