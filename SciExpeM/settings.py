"""
Django settings for SciExpeM project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os


class SettingsReader:
    def __init__(self, path='settingsFile'):
        self.settings = {}
        with open(path, 'r') as file:
            for line in file:
                line_split = line.strip().split("=")
                key, value = line_split[0], line_split[1]
                self.settings[key] = value




# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SettingsReader = SettingsReader(os.path.join(BASE_DIR, 'SciExpeM', 'settingsFile'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SettingsReader.settings['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
COMPRESS_ENABLED = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'SciExpeM',
    'ExperimentManager.apps.ExperimentManagerConfig',
    'FrontEnd.apps.FrontendConfig',
    'rest_framework',
    'rest_framework.authtoken',
    'OpenSmoke.apps.OpensmokeConfig',
    'CurveMatching.apps.CurvematchingConfig',
    'ReSpecTh.apps.RespecthConfig',
    'dbbackup',
    'django_cron'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'compression_middleware.middleware.CompressionMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'SciExpeM.urls'



CORS_ORIGIN_ALLOW_ALL = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SciExpeM.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASE_NAME = SettingsReader.settings['DATABASE_NAME']
DATABASE_USER = SettingsReader.settings['DATABASE_USER']
DATABASE_PASSWORD = SettingsReader.settings['DATABASE_PASSWORD']
DATABASE_IP = SettingsReader.settings['DATABASE_IP']
DATABASE_PORT = SettingsReader.settings['DATABASE_PORT']

DATABASES = {
    'default': {
        'NAME': DATABASE_NAME,
        'ENGINE': 'django.db.backends.postgresql',
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
        'HOST': DATABASE_IP,
        'PORT': DATABASE_PORT,
    }
}


# DB BACKUP

# DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
# DBBACKUP_STORAGE_OPTIONS = {'location': '/tmp/'}

DBBACKUP_STORAGE = 'storages.backends.sftpstorage.SFTPStorage'
DBBACKUP_STORAGE_OPTIONS = {
    'host': SettingsReader.settings['SSH_HOSTS'],
    'params': {
        'username': SettingsReader.settings['SSH_USERNAME'],
        'password': SettingsReader.settings['SSH_PASSWORD'],
    },
    'known_host_file': 'known_hosts',
    'root_path': SettingsReader.settings['SSH_PATH'],
}

CRON_CLASSES = [
    "ExperimentManager.admin.Backup",
]

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles/")

STATICFILES_DIRS = [os.path.join(BASE_DIR, "FrontEnd", "static", "FrontEnd")]

REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
    ),

}

GROUP_ACTIVE = False

# Security

# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# os.environ['HTTPS'] = "on"

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Local
OPTIMAPP_PATH = SettingsReader.settings['OPTIMAPP_PATH']
